#region License

//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

#endregion

namespace OpenRasta.Tests.Unit.Codecs.ApplicationXWwwUrlformEncodedCodec
{
    #region Using Directives

    using System.Linq;

    using NUnit.Framework;

    using OpenRasta.Data;
    using OpenRasta.Testing.Framework.MockTypes;
    using OpenRasta.Testing.Specifications;

    #endregion

    public class when_parsing_for_complex_types : app_www_context
    {
        [Test]
        public void the_complex_type_is_built_when_referenced_by_name()
        {
            given_context();
            given_request_stream("thecustomer.FirstName=John");

            when_decoding<Customer>("thecustomer");

            then_decoding_result<Customer>().FirstName.ShouldBe("John");

        }

        [Test]
        public void the_complex_type_is_built_from_a_simple_value()
        {
            given_context();
            given_request_stream("Customer=John");

            when_decoding<Customer>();

            then_decoding_result<Customer>().FirstName.ShouldBe("John");
        }
        
        [Test]
        public void multiple_values_for_a_non_array_type_are_ignored()
        {
            given_context();
            given_request_stream("Customer.FirstName=John&Customer.FirstName=Jack&Customer.LastName=Doe");

            when_decoding<Customer>();
            then_decoding_result<Customer>().FirstName.ShouldBe(null);
            then_decoding_result<Customer>().LastName.ShouldBe("Doe");

        }
        
        [Test]
        public void the_complex_type_is_built_from_key_value_pairs()
        {
            given_context();
            given_request_stream("Customer.FirstName=John&Customer.LastName=Doe&Customer.DateOfBirth.Day=10");

            when_decoding<Customer>();

            then_decoding_result<Customer>().ShouldBeOfType<Customer>();
            then_decoding_result<Customer>().FirstName.ShouldBe("John");
            then_decoding_result<Customer>().LastName.ShouldBe("Doe");

            then_decoding_result<Customer>().DateOfBirth.Day.ShouldBe(10);
        }
        
        [Test]
        public void the_changeset_type_is_built_from_key_value_pairs()
        {
            given_context();

            given_request_stream("Customer.FirstName=John&Customer.LastName=Doe&Customer.DateOfBirth.Day=10");

            when_decoding<ChangeSet<Customer>>();

            var customer = new Customer();
            then_decoding_result<ChangeSet<Customer>>().Apply(customer);

            customer.FirstName.ShouldBe("John");
            customer.LastName.ShouldBe("Doe");
            customer.DateOfBirth.Day.ShouldBe(10);
        }

        [Test]
        public void indexers_are_supported_when_encoded()
        {
            given_context();
            given_request_stream("Customer.Attributes%3A1=blue&Customer.Attributes%3A2=red");

            when_decoding<Customer>();

            then_decoding_result<Customer>().Attributes.Count().ShouldBe(2);
        }
    }
}