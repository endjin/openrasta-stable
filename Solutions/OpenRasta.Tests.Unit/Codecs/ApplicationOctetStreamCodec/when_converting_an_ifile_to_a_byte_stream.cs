#region License

//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

#endregion

namespace OpenRasta.Tests.Unit.Codecs.ApplicationOctetStreamCodec
{
    #region Using Directives

    using System.Text;

    using NUnit.Framework;

    using OpenRasta.Codecs;
    using OpenRasta.IO;
    using OpenRasta.Testing.Specifications;
    using OpenRasta.Tests.Unit.Codecs.MediaTypeDictionary;
    using OpenRasta.Web;

    #endregion

    [TestFixture]
    public class when_converting_an_ifile_to_a_byte_stream : media_type_writer_context<ApplicationOctetStreamCodec>
    {
        object entity;

        [Test]
        public void a_file_without_name_doesnt_generate_a_header()
        {
            given_context();
            given_entity(new InMemoryFile());

            when_coding();

            Response.Headers.ContentDisposition.ShouldBeNull();
        }

        [Test]
        public void a_file_with_a_name_generates_an_inline_content_disposition()
        {
            given_context();
            given_entity(new InMemoryFile() { FileName = "test.txt" });

            when_coding();
            Response.Headers.ContentDisposition.ShouldNotBeNull();

            Response.Headers.ContentDisposition.Disposition.ShouldBe("inline");
            Response.Headers.ContentDisposition.FileName.ShouldBe("test.txt");
        }
        
        [Test]
        public void a_file_without_a_content_type_generates_an_app_octet_stream_content_type()
        {
            given_context();
            given_entity(new InMemoryFile());

            when_coding();
            Response.Headers.ContentType.ShouldBe(MediaType.ApplicationOctetStream);
        }
        
        [Test]
        public void a_file_with_a_content_type_generates_the_correct_content_type_header()
        {
            given_context();
            given_entity(new InMemoryFile{ContentType = MediaType.TextPlain});

            when_coding();
            Response.Headers.ContentType.ShouldBe(MediaType.TextPlain);
        }
        
        [Test]
        public void a_file_with_a_content_type_of_app_octet_stream_doesnt_override_response_content_type()
        {
            given_context();
            given_entity(new InMemoryFile { ContentType = MediaType.ApplicationOctetStream });
            Response.Headers.ContentType = MediaType.Xml;

            when_coding();
            Response.Headers.ContentType.ShouldBe(MediaType.Xml);
        }
        
        [Test]
        public void a_file_with_a_more_specific_content_type_overrides_the_response_content_type()
        {
            given_context();
            given_entity(new InMemoryFile { ContentType = MediaType.Xml });
            Response.Headers.ContentType = MediaType.ApplicationOctetStream;

            when_coding();
            Response.Headers.ContentType.ShouldBe(MediaType.Xml);
        }
        
        [Test]
        public void a_downloadable_file_with_name_generates_a_content_disposition()
        {
            given_context();
            given_entity(new InMemoryDownloadableFile() { FileName = "test.txt" });

            when_coding();
            Response.Headers.ContentDisposition.ShouldNotBeNull();

            Response.Headers.ContentDisposition.Disposition.ShouldBe("attachment");
            Response.Headers.ContentDisposition.FileName.ShouldBe("test.txt");
            
        }
        
        [Test]
        public void a_downloadable_file_without_name_generates_a_content_disposition()
        {
            given_context();
            given_entity(new InMemoryDownloadableFile());

            when_coding();
            Response.Headers.ContentDisposition.ShouldNotBeNull();

            Response.Headers.ContentDisposition.Disposition.ShouldBe("attachment");
            Response.Headers.ContentDisposition.FileName.ShouldBeNull();

        }
        
        private void when_coding()
        {
            var codec = CreateCodec(Context) as IMediaTypeWriter;
            codec.WriteTo(this.entity, Context.Response.Entity, null);
        }

        private void given_entity(InMemoryFile file)
        {
            file.OpenStream().Write(Encoding.UTF8.GetBytes("Test data"));
            this.entity = file;
        }

        protected override ApplicationOctetStreamCodec CreateCodec(ICommunicationContext context)
        {
            return new ApplicationOctetStreamCodec();
        }
    }
}