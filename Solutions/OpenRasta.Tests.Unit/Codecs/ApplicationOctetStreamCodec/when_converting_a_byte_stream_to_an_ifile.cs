#region License

//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

#endregion

namespace OpenRasta.Tests.Unit.Codecs.ApplicationOctetStreamCodec
{
    #region Using Directives

    using NUnit.Framework;

    using OpenRasta.IO;
    using OpenRasta.Testing.Specifications;

    #endregion

    public class when_converting_a_byte_stream_to_an_ifile : applicationoctetstream_context
    {
        [Test]
        public void an_ifile_object_is_generated()
        {
            given_context();
            given_request_entity_stream();

            when_decoding();

            ThenTheResult.ShouldNotBeNull();
        }

        [Test]
        public void the_length_is_set_to_the_proper_value()
        {
            given_context();
            given_request_entity_stream(1000);

            when_decoding();

            ThenTheResult.Length.ShouldBe(1000);
        }

        [Test]
        public void an_ireceivedfile_object_is_generated()
        {
            given_context();
            given_request_entity_stream();

            when_decoding();

            ThenTheResult.ShouldNotBeNull();
        }
        
        [Test]
        public void the_file_name_is_null_if_no_content_disposition_header_is_present()
        {
            given_context();
            given_request_entity_stream();
            given_content_disposition_header("attachment");

            when_decoding();

            ThenTheResult.FileName.ShouldBeNull();
        }

        [Test]
        public void the_original_name_is_set_when_present_in_the_content_disposition_header()
        {
            given_context();
            given_request_entity_stream();
            given_content_disposition_header("attachment;filename=\"test.txt\"");

            when_decoding();

            ThenTheResult.FileName.ShouldBe("test.txt");
        }

        public void when_decoding()
        {
            when_decoding<IFile>();
        }
        
        public IFile ThenTheResult
        {
            get { return then_decoding_result<IFile>(); }
        }
    }
}

#region Full license
//
// Permission is hereby granted, free of charge, to any person obtaining
// a copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to
// permit persons to whom the Software is furnished to do so, subject to
// the following conditions:
// 
// The above copyright notice and this permission notice shall be
// included in all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
// OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
#endregion
