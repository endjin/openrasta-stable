#region License

//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

#endregion

namespace OpenRasta.Tests.Unit.Codecs.MediaTypeDictionary
{
    #region Using Directives

    using System;
    using System.IO;
    using System.Reflection;
    using System.Text;

    using OpenRasta.Codecs;
    using OpenRasta.IO;
    using OpenRasta.Testing.Framework;
    using OpenRasta.Testing.Specifications;
    using OpenRasta.TypeSystem;
    using OpenRasta.Web;

    #endregion

    public abstract class media_type_reader_context<TCodec> : codec_context<TCodec> where TCodec : ICodec
    {
        object theResult;

        protected IRequest Request
        {
            get { return Context.Request; }
        }

        protected void given_request_content_type(string mediaType)
        {
            Request.Entity.ContentType = new MediaType(mediaType);
        }

        protected void given_request_stream(string requestData, Encoding encoding)
        {
            given_request_stream(stream =>
            {
                using (var sw = new DeterministicStreamWriter(stream, encoding, StreamActionOnDispose.None))
                {
                    sw.Write(requestData);
                }
            });
        }

        protected void given_request_stream(Action<Stream> writer)
        {
            Request.Entity.Stream.Position = 0;

            writer(Request.Entity.Stream);

            Request.Entity.Stream.Position = 0;
        }

        protected void given_request_stream(string requestData)
        {
            given_request_stream(requestData, Encoding.UTF8);
        }

        protected T then_decoding_result<T>()
        {
            this.theResult.ShouldNotBeNull();
            this.theResult.ShouldNotBe(Missing.Value);
            this.theResult.ShouldBeAssignableTo<T>();

            return (T)this.theResult;
        }

        protected void when_decoding<T>()
        {
            when_decoding<T>("entity");
        }

        protected void when_decoding<T>(string paramName)
        {
            var codecInstance = CreateCodec(Context);
            var codec = codecInstance as IMediaTypeReader;

            if (codec != null)
            {
                this.theResult = codec.ReadFrom(Context.Request.Entity,TypeSystems.Default.FromClr(typeof(T)), paramName);
            }
            else
            {
                throw new NullReferenceException();
            }
        }
    }
}