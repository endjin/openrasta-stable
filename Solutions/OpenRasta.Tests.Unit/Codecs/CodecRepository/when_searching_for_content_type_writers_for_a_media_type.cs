#region License

//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

#endregion

namespace OpenRasta.Tests.Unit.Codecs.CodecRepository
{
    #region Using Directives

    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    using NUnit.Framework;

    using OpenRasta.Codecs;
    using OpenRasta.Codecs.Framework;
    using OpenRasta.Contracts.TypeSystem;
    using OpenRasta.Testing.Framework.Fakes;
    using OpenRasta.Testing.Specifications;
    using OpenRasta.TypeSystem;
    using OpenRasta.Web;

    #endregion

    public class when_searching_for_content_type_writers_for_a_media_type : codec_repository_context
    {
        private readonly ITypeSystem typeSystem = TypeSystems.Default;
        private new IList<CodecRegistration> thenTheResult;

        [Test]
        public void generic_types_are_found()
        {
            GivenACodec<CustomerCodec, IList<Customer>>("application/xml");

            WhenFindingCodecsFor<IList<Customer>>("application/xml");

            this.thenTheResult.Count.ShouldBe(1);
            this.thenTheResult[0].CodecType.ShouldBe<CustomerCodec>();
        }

        [Test]
        public void inherited_types_are_found()
        {
            GivenACodec<CustomerCodec, object>("application/xml");

            WhenFindingCodecsFor<IList<Customer>>("application/xml");

            this.thenTheResult.Count.ShouldBe(1);
            this.thenTheResult[0].CodecType.ShouldBe<CustomerCodec>();
        }

        [Test]
        public void interface_types_are_found()
        {
            GivenACodec<CustomerCodec, IList<Customer>>("application/xml");

            WhenFindingCodecsFor<List<Customer>>("application/xml");

            this.thenTheResult.Count.ShouldBe(1);
            this.thenTheResult[0].CodecType.ShouldBe<CustomerCodec>();
        }

        [Test]
        public void matching_is_done_against_parent_interfaces()
        {
            GivenACodec<AnotherCustomerCodec, IEnumerable>("text/plain");

            WhenFindingCodecsFor<IList<Customer>>("text/plain");

            this.thenTheResult.Count.ShouldBe(1);
            this.thenTheResult[0].CodecType.ShouldBe<AnotherCustomerCodec>();
        }

        [Test]
        public void object_registrations_are_found_for_interfaces()
        {
            GivenACodec<AnotherCustomerCodec, object>("text/plain");

            WhenFindingCodecsFor<IList<Customer>>("text/plain");

            this.thenTheResult.Count.ShouldBe(1);
            this.thenTheResult[0].CodecType.ShouldBe<AnotherCustomerCodec>();
        }

        [Test]
        public void only_codecs_for_a_compatible_mime_type_are_selected()
        {
            GivenACodec<CustomerCodec, IList<Customer>>("application/xml");
            GivenACodec<AnotherCustomerCodec, IList<Customer>>("text/plain");

            WhenFindingCodecsFor<IList<Customer>>("text/plain");

            this.thenTheResult.Count.ShouldBe(1);
            this.thenTheResult[0].CodecType.ShouldBe<AnotherCustomerCodec>();
        }

        [Test]
        public void the_closest_matching_type_is_selected()
        {
            GivenACodec<CustomerCodec, object>("application/xml;q=0.5");
            GivenACodec<AnotherCustomerCodec, string>("text/plain;q=0.4");

            WhenFindingCodecsFor<string>("*/*");

            this.thenTheResult.Count.ShouldBe(2);
            this.thenTheResult[0].CodecType.ShouldBe<AnotherCustomerCodec>();
        }

        [Test]
        public void the_server_quality_is_used_in_prioritizing_the_negotiated_media_type()
        {
            GivenACodec<CustomerCodec, object>(
                "application/xhtml+xml;q=0.9,text/html,application/vnd.openrasta.htmlfragment+xml;q=0.5");
            WhenFindingCodecsFor<object>("text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8");

            this.thenTheResult.Count.ShouldBeGreaterThan(0);
            this.thenTheResult[0].MediaType.ToString().ShouldBe("text/html");
        }

        protected void WhenFindingCodecsFor<TResourceType>(params string[] contentTypes)
        {
            this.thenTheResult = this.Codecs.FindMediaTypeWriter(this.typeSystem.FromClr(typeof(TResourceType)), MediaType.Parse(string.Join(",", contentTypes))).ToList();
        }
    }
}