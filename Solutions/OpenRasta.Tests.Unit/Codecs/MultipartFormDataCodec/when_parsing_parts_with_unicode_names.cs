#region License

//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

#endregion

namespace OpenRasta.Tests.Unit.Codecs.MultipartFormDataCodec
{
    #region Using Directives

    using NUnit.Framework;

    using OpenRasta.Contracts.IO;
    using OpenRasta.IO;
    using OpenRasta.Testing.Specifications;
    using OpenRasta.Tests.Unit.Codecs.MediaTypeDictionary;

    #endregion

    public class when_parsing_parts_with_unicode_names : multipart_codec
    {
        [Test]
        public void the_field_name_encoded_in_quoted_printable_for_utf_8_is_recognized()
        {
            given_context();
            
            GivenAMultipartRequestStream(Scenarios.TelephoneFieldUtf8Quoted);

            when_decoding<string>("Téléphone");
            then_decoding_result<string>().ShouldBe("077 777 7777");
        }

        [Test]
        public void a_field_name_encoded_in_base64_for_utf_8_is_recognized()
        {
            given_context();
            
            GivenAMultipartRequestStream(Scenarios.TelephoneFieldUtf8Base64);

            when_decoding<string>("Téléphone");
            then_decoding_result<string>().ShouldBe("077 777 7777");
        }
        
        [Test]
        public void a_field_name_encoded_in_base64_for_iso_is_recognized()
        {
            given_context();
            
            GivenAMultipartRequestStream(Scenarios.TelephoneFieldIso88591Quoted);

            when_decoding<string>("Téléphone");
            then_decoding_result<string>().ShouldBe("077 777 7777");
        }

        [Test]
        public void a_sub_codec_is_used_to_resolve_a_parameter_name()
        {
            given_context();
            
            GivenAMultipartRequestStream(Scenarios.FileField);

            when_decoding<IFile>("file");
            then_decoding_result<IFile>().FileName.ShouldBe("temp.txt");
            then_decoding_result<IFile>().Length.ShouldBe(85000);
        }
    }
}