#region License

//-------------------------------------------------------------------------------------------------
// <auto-generated> 
// Marked as auto-generated so StyleCop will ignore BDD style tests
// </auto-generated>
//-------------------------------------------------------------------------------------------------

#pragma warning disable 169
// ReSharper disable InconsistentNaming
// ReSharper disable UnusedMember.Global
// ReSharper disable UnusedMember.Local

#endregion

namespace OpenRasta.Tests.Unit.Codecs.MultipartFormDataCodec
{
    #region Using Directives

    using System.Collections.Generic;

    using NUnit.Framework;

    using OpenRasta.Codecs.WebForms;
    using OpenRasta.Testing.Specifications;

    #endregion

    public class when_rewriting_directives_with_the_page_parser : context
    {
        [Test]
        public void names_in_brackets_are_resolved()
        {
            var typeName = "OpenRasta.Codecs.WebForms.ResourceView<System.String>";

            OpenRastaPageParserFilter.GetTypeFromCSharpType(typeName, null).ShouldBe<ResourceView<string>>();
        }

        [Test]
        public void nested_types_are_resolved()
        {
            var typeName = "OpenRasta.Codecs.WebForms.ResourceView<System.Collections.Generic.KeyValuePair<System.String,System.String>>";

            OpenRastaPageParserFilter.GetTypeFromCSharpType(typeName, null).ShouldBe<ResourceView<KeyValuePair<string,string>>>();
        }
        
        public void types_are_resolved_against_imported_namespaces()
        {
            var typename = "String";

            OpenRastaPageParserFilter.GetTypeFromCSharpType(typename, new[] { "System" }).ShouldBe<string>();
        }
    }
}